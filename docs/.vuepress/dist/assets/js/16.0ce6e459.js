(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{372:function(n,a,t){"use strict";t.r(a);var r=t(22),e=Object(r.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"一、什么是斐波那契数列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是斐波那契数列"}},[n._v("#")]),n._v(" 一、什么是斐波那契数列")]),n._v(" "),t("blockquote",[t("p",[n._v("斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n>2，n∈N*）（来源："),t("a",{attrs:{href:"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[n._v("斐波那契数列——百度百科"),t("OutboundLink")],1),n._v("）")])]),n._v(" "),t("h2",{attrs:{id:"二、为什么要研究斐波那契数列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么要研究斐波那契数列"}},[n._v("#")]),n._v(" 二、为什么要研究斐波那契数列")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_39300332/article/details/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%BA%E4%BB%80%E4%B9%88%E9%82%A3%E4%B9%88%E9%87%8D%E8%A6%81%EF%BC%8C%E6%89%80%E6%9C%89%E5%85%B3%E4%BA%8E%E6%95%B0%E5%AD%A6%E7%9A%84%E4%B9%A6%E5%87%A0%E4%B9%8E%E9%83%BD%E4%BC%9A%E6%8F%90%E5%88%B0%EF%BC%9F%20-%20%E7%9F%A5%E4%B9%8E%20https://www.zhihu.com/question/28062458",target:"_blank",rel:"noopener noreferrer"}},[n._v("斐波那契数列为什么那么重要——知乎"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"三、javascript实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、javascript实现"}},[n._v("#")]),n._v(" 三、JavaScript实现")]),n._v(" "),t("h3",{attrs:{id:"_1-递归-普通版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-递归-普通版"}},[n._v("#")]),n._v(" 1：递归（普通版）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n")])])]),t("p",[n._v("这个方法算是代码最少也容易理解，但是当n较大时很快产生栈溢出，引发原因是“调用帧”过多，详情参阅"),t("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"}},[n._v("函数扩展之尾调用优化——阮一峰"),t("OutboundLink")],1)]),n._v(" "),t("h3",{attrs:{id:"_2-递归-优化版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-递归-优化版"}},[n._v("#")]),n._v(" 2：递归（优化版）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n  return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n")])])]),t("p",[n._v("此方式是函数尾调用优化之后的写法（默认参数ES6及以后版本支持，ES5请使用常规默认值写法），理解上稍微复杂，但是不会发生栈溢出，推荐使用。")]),n._v(" "),t("h3",{attrs:{id:"_3-循环版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-循环版"}},[n._v("#")]),n._v(" 3：循环版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function Fibonacci3(n){\n    if (n===1 || n===2) {\n        return 1;\n   }\n    let ac1 = 1, ac2 = 1;\n    for (let i = 2; i < n; i++){\n        [ac1, ac2] = [ac2, ac1 + ac2];\n    }\n    return ac2;\n}\n")])])]),t("p",[n._v("循环版本最好理解，就是给初始值，然后不断的累加即可(用了解构赋值，代码更简洁)。")]),n._v(" "),t("h3",{attrs:{id:"_4-generator版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-generator版"}},[n._v("#")]),n._v(" 4：generator版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("function* fibonacci() {\n  let [prev, curr] = [1, 1];\n      while (true) {\n         [prev, curr] = [curr, prev + curr];\n        yield curr;\n  }\n}\nfunction Fibonacci(n){\n    if (n===1 || n===2) {\n            return 1;\n        }\n    let ac = 0;\n    const fibo = fibonacci();\n    for (let i = 2;i < n; i++) {\n      ac = fibo.next()\n    }\n    return ac.value;\n}")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);